```python
# The task is "drop the glue stick into the black box, then drop the screwdriver into the black box."
# This task involves two objects (glue stick and screwdriver) and one container (black box).
# The robot must grasp and drop each object into the black box sequentially.
# Therefore, the task can be broken down into 4 stages:
# 1. Grasp the glue stick (keypoint 1)
# 2. Drop the glue stick into the black box
# 3. Grasp the screwdriver (keypoint 0)
# 4. Drop the screwdriver into the black box

num_stages = 4

### stage 1 sub-goal constraints (grasp glue stick)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the glue stick (keypoint 1)."""
    return np.linalg.norm(end_effector - keypoints[1])

### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints (drop glue stick into black box)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """The glue stick (keypoint 1) is 5cm above the center of the black box (average of keypoints 2, 3, 4)."""
    box_center = (keypoints[2] + keypoints[3] + keypoints[4]) / 3
    offsetted_point = box_center + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[1] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the glue stick (keypoint 1)."""
    return get_grasping_cost_by_keypoint_idx(1)

### stage 3 sub-goal constraints (grasp screwdriver)
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the screwdriver (keypoint 0)."""
    return np.linalg.norm(end_effector - keypoints[0])

### stage 3 path constraints
# No path constraints for grasping stage

### stage 4 sub-goal constraints (drop screwdriver into black box)
def stage4_subgoal_constraint1(end_effector, keypoints):
    """The screwdriver (keypoint 0) is 5cm above the center of the black box (average of keypoints 2, 3, 4)."""
    box_center = (keypoints[2] + keypoints[3] + keypoints[4]) / 3
    offsetted_point = box_center + np.array([0, 0, 0.05])
    return np.linalg.norm(keypoints[0] - offsetted_point)

### stage 4 path constraints
def stage4_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the screwdriver (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [1, -1, 0, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, 1, -1, 0]
```