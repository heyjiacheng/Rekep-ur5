```python
# The task is "Drop the box cutter into the blue box."
# From the image, keypoints 0, 1, and 3 are on the box cutter.
# Keypoints 5 and 6 are on the blue box.
# The task involves:
# 1. Grasping the box cutter.
# 2. Moving the box cutter above the blue box.
# 3. Dropping the box cutter into the blue box.

num_stages = 3

### stage 1 sub-goal constraints (grasp box cutter)
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Align the end-effector with the handle of the box cutter (keypoint 0)."""
    return np.linalg.norm(end_effector - keypoints[0])
    
### stage 1 path constraints
# No path constraints for grasping stage

### stage 2 sub-goal constraints (move box cutter above blue box)
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Move the box cutter (keypoint 0) to be 10cm above the center of the blue box (average of keypoints 5 and 6)."""
    box_center = 0.5 * (keypoints[5] + keypoints[6])
    offsetted_point = box_center + np.array([0, 0, 0.10])
    return np.linalg.norm(keypoints[0] - offsetted_point)

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """The robot must still be grasping the box cutter (keypoint 0)."""
    return get_grasping_cost_by_keypoint_idx(0)

### stage 3 sub-goal constraints (drop box cutter into blue box)
def stage3_subgoal_constraint1(end_effector, keypoints):
    """Ensure the box cutter (keypoint 0) is inside the blue box (between keypoints 5 and 6 in x-y plane, and below their z)."""
    box_min = np.minimum(keypoints[5], keypoints[6])
    box_max = np.maximum(keypoints[5], keypoints[6])
    cutter = keypoints[0]
    xy_inside = np.all(cutter[:2] >= box_min[:2]) and np.all(cutter[:2] <= box_max[:2])
    z_below = cutter[2] <= max(keypoints[5][2], keypoints[6][2])
    cost = 0 if (xy_inside and z_below) else 1
    return cost

### stage 3 path constraints
# No path constraints after release

grasp_keypoints = [0, -1, -1]
release_keypoints = [-1, -1, 0]
```